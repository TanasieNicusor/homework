#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Function to compute the minimum of three values
int min(int a, int b, int c) 
{
    if (a <= b && a <= c) return a;
    if (b <= a && b <= c) return b;
    return c;
}

// Function to compute the Levenshtein distance between two strings
int levenshtein_distance(const char *s1, const char *s2)
{
    int len1 = strlen(s1);
    int len2 = strlen(s2);
    
    // Create a 2D array to store distances
    int **dist = (int **)malloc((len1 + 1) * sizeof(int *));
    for (int i = 0; i <= len1; i++) 
        dist[i] = (int *)malloc((len2 + 1) * sizeof(int));

    // Initialize the base cases
    for (int i = 0; i <= len1; i++) dist[i][0] = i;
    for (int j = 0; j <= len2; j++) dist[0][j] = j;

    // Compute distances
    for (int i = 1; i <= len1; i++) 
        for (int j = 1; j <= len2; j++) 
        {
            int cost = (s1[i-1] == s2[j-1]) ? 0 : 1;
            dist[i][j] = min(dist[i-1][j] + 1, dist[i][j-1] + 1, dist[i-1][j-1] + cost);
        }

    int result = dist[len1][len2];

    // Free allocated memory
    for (int i = 0; i <= len1; i++) 
    {
        free(dist[i]);
    }
    free(dist);

    return result;
}

int main() 
{
    char valid_syntax[50], code_fragment[50];

    printf("Give valid syntax : ");
    fgets(valid_syntax, 50, stdin);

    printf("Give code fragment : ");
    fgets(code_fragment, 50, stdin);

    int distance = levenshtein_distance(code_fragment, valid_syntax);

    printf("Minimum number of operations required: %d\n", distance);

    return 0;
}
