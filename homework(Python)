def min(a, b, c):
    if a <= b and a <= c:
        return a
    if b <= a and b <= c:
        return b
    return c

def levenshtein_distance(s1, s2):
    len1 = len(s1)
    len2 = len(s2)

    # Create a 2D array to store distances
    dist = [[0 for _ in range(len2 + 1)] for _ in range(len1 + 1)]

    # Initialize the base cases
    for i in range(len1 + 1):
        dist[i][0] = i
    for j in range(len2 + 1):
        dist[0][j] = j

    # Compute distances
    for i in range(1, len1 + 1):
        for j in range(1, len2 + 1):
            cost = 0 if s1[i - 1] == s2[j - 1] else 1
            dist[i][j] = min(dist[i - 1][j] + 1, dist[i][j - 1] + 1, dist[i - 1][j - 1] + cost)

    return dist[len1][len2]

def main():
    valid_syntax = input("Give valid syntax: ").strip()
    code_fragment = input("Give code fragment: ").strip()

    distance = levenshtein_distance(code_fragment, valid_syntax)

    print(f"Minimum number of operations required: {distance}")

if __name__ == "__main__":
    main()
